server:
  port: 0
  
info:
 component: Financiero Microservicelogging

#eureka:
#  instance:
#    leaseRenewalIntervalInSeconds: 3
#    metadataMap:
#      instanceId: ${vcap.application.instance_id:${spring.application.name}:${spring.application.instance_id:${random.value}}}
#  client:
#    # Default values comes from org.springframework.cloud.netflix.eurek.EurekaClientConfigBean
#    registryFetchIntervalSeconds: 5
#    instanceInfoReplicationIntervalSeconds: 5
#    initialInstanceInfoReplicationIntervalSeconds: 5

logging:
  level:
    root: WARN
    co.agileventure: INFO
   
#==============================
#  JMS/ ACTIVEMQ
#==============================
mensajes:
    queue:
       eventosestudianteliq: eventosestudianteliq
       eventosliquidacioncrm: eventosliquidacioncrm
       eventoscalendarioacademico: eventoscalendarioacademico
       eventosasignatura: eventosasignatura
       eventossolicitudcreditocrm: eventossolicitudcreditocrm
       eventoscalendarioacademicoact: eventoscalendarioacademicoact
       eventosprograma: eventosprograma
       eventosnf: eventosnf
       eventosfacultad : eventosfacultad
       eventosrequisito: eventosrequisito
       eventostipoconvenio: eventostipoconvenio
       eventosestudianteadmitido: eventosestudianteadmitido
       eventosliquidacionestudiante: eventosliquidacionestudiante
       eventosconfiguracionprograma: eventosconfiguracionprograma
       eventosestudianteliqmasivo: eventosestudianteliqmasivo
#        eventosfacultad : eventosfacultad
#        input: reportq-out
#        output: reportq-in
#====================================
#         admisi√≥n
#====================================          
jms:
    cache:
        size: 10
    clientid:
        topic: finanancieroclienttopic
        queue: financieroclientqueue



spring:
   datasource:
         url: jdbc:sqlserver://192.168.1.20\ZABUD;database=financiero;user=sa;password=root;
         driver-class-name: com.microsoft.sqlserver.jdbc.SQLServerDriver
#       username: zabud
#       password: Zcloud2016
#       url: jdbc:mysql://localhost/financiero
#       driver-class-name:  com.mysql.jdbc.Driver
      
# Username and password
#       username: root
#       password: root
       
# Keep the connection alive if idle for a long time (needed in production)
#       testWhileIdle: true
#       validationQuery: SELECT 1
       
# ===============================
# = JPA / HIBERNATE
# ===============================

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager).# Show or not log for each sql query

   jpa:
       show-sql: true
       
# Hibernate ddl auto (create, create-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project

       hibernate:
           ddl-auto: update
           
# Naming strategy
           naming-strategy: org.hibernate.cfg.ImprovedNamingStrategy
           
# Allows Hibernate to generate SQL optimized for a particular DBMS
       properties:
           hibernate:
               dialect: org.hibernate.dialect.SQLServerDialect
               
#Propiedades de  configuracion para el Message Broker
#jms:
#  cache:
#    size: 10